<filters  xmlns="http://indexdata.com/metaproxy">
  <filter type="sparql">
      <!-- Which sparql server to use, our demo, or your local installation -->
    <defaults uri="http://bibframe.indexdata.com/sparql/"/>
    <!--defaults uri="http://localhost:8890/sparql/"/-->

    <!-- New structure: Any search in work returns just a list of records.
         Present will make another request to the backend to get the fields
         we want, depending on the schema. That part is not yet implemented -->
    <db path="work" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT ?work
      </form>
      <criteria>?work a bf:Work</criteria>
      <!-- TODO: Many more indexes like the ones below-->
      <index type="bf.title">?work bf:workTitle ?wt .
          ?wt bf:titleValue %v FILTER(contains(%v, %s))</index>
      <index type="bf.creator">?work bf:creator ?c .
          ?c bf:label %v FILTER(contains(%v, %s))</index>
      <index type="bf.subject">?work bf:subject ?subject .
          ?subject bf:label %v FILTER(contains(%v, %s))
      </index>
      <uri type="BF-L">
        CONSTRUCT { ?work ?rel ?subj }
         WHERE {
         ?work a bf:Work .
         ?work ?rel ?subj .
         ?work ?rel ?obj FILTER( str(?work) = %s )
        }
      </uri>
      <uri type="BF-F">
        CONSTRUCT { ?work ?rel ?obj .
                    ?obj ?rel1 ?obj1 .
                    ?obj1 ?rel2 ?obj2 .
                    ?obj2 ?rel3 ?obj3 }
         WHERE {
         ?work a bf:Work .
         ?work ?rel ?obj .
      OPTIONAL { 
          ?obj ?rel1 ?obj1  
            MINUS { ?obj a bf:Work } 
          }
      OPTIONAL {
          ?obj1 ?rel2 ?obj2 
            MINUS { ?obj1 a bf:Work } 
          } 
      OPTIONAL { 
          ?obj2 ?rel3 ?obj3 
            MINUS { ?obj2 a bf:Work } 
          }
         ?work ?rel ?obj FILTER( str(?work) = %s )
        }
      </uri>
    </db>
    <!-- Instance searches, need to be refined later -->
    <db path="instance" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT ?instance ?title ?format</form>
      <criteria>?instance a bf:Instance</criteria>
      <criteria>?instance bf:title ?title</criteria>
      <index type="4">?instance bf:title %v FILTER(contains(%v, %s))</index>
      <criteria>?instance bf:format ?format</criteria>
      <index type="1013">?instance bf:format %s</index>
    </db>

    <!-- Simple databases -->
    <db path="place" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT ?place </form>
      <criteria>?place a bf:Place</criteria>
      <criteria>?place ?rel ?obj</criteria>
      <index type="bf.place">?place bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?place bf:label %v FILTER(contains(%v, %s))</index>
      <index type="1016">?place bf:label %v FILTER(contains(%v, %s))</index>
      <uri type="BF-L">
        CONSTRUCT { %u ?rel ?obj }
         WHERE {
           %u ?rel ?obj .
         }
      </uri>
      <!-- Experimental, to get just the URIs out, in proper rdf. Probably not useful 
      <uri type="BF-U">
        CONSTRUCT { %u bf:uri %u }
         WHERE {
           %u bf:label ?lbl .
         }
      </uri>
      -->
      <uri type="BF-F">
          <!-- I don't think we need more than one level for these simple 
          databases -->
        CONSTRUCT { %u ?rel ?obj . 
                    ?obj ?rel1 ?obj1 .
                    <!--  ?obj1 ?rel2 ?obj2 -->
                  }
         WHERE {
           %u ?rel ?obj .
           OPTIONAL { ?obj ?rel1 ?obj1 }
           <!-- OPTIONAL { ?obj1 ?rel2 ?obj2 }   Seems not to be necessary -->
         }
      </uri>
    </db>
    <db path="place-old" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?place ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?place a bf:Place</criteria>
      <criteria>?place bf:label ?label</criteria>
      <criteria>OPTIONAL { ?place bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?place bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?place bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.place">?place bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?place bf:label %v FILTER(contains(%v, %s))</index>
    </db>
    <db path="person" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?person ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?person a bf:Person</criteria>
      <criteria>?person bf:label ?label</criteria>
      <criteria>OPTIONAL { ?person bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?person bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?person bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.person">?person bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?person bf:label %v FILTER(contains(%v, %s))</index>
    </db>
    <db path="meeting" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?meeting ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?meeting a bf:Meeting</criteria>
      <criteria>?meeting bf:label ?label</criteria>
      <criteria>OPTIONAL { ?meeting bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?meeting bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?meeting bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.meeting">?meeting bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?meeting bf:label %v FILTER(contains(%v, %s))</index>
    </db>
    <db path="agent" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?agent ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?agent a bf:Agent</criteria>
      <criteria>?agent bf:label ?label</criteria>
      <criteria>OPTIONAL { ?agent bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?agent bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?agent bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.agent">?agent bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?agent bf:label %v FILTER(contains(%v, %s))</index>
    </db>
    <db path="event" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?event ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?event a bf:Event</criteria>
      <criteria>?event bf:label ?label</criteria>
      <criteria>OPTIONAL { ?event bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?event bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?event bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.event">?event bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?event bf:label %v FILTER(contains(%v, %s))</index>
    </db>
    <db path="organization" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?organization ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?organization a bf:Organization</criteria>
      <criteria>?organization bf:label ?label</criteria>
      <criteria>OPTIONAL { ?organization bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?organization bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?organization bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.organization">?organization bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?organization bf:label %v FILTER(contains(%v, %s))</index>
    </db>
    <db path="topic" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT DISTINCT  ?label ?id ?topic ?relatedTo ?authorizedAccessPoint </form>
      <criteria>?topic a bf:Topic</criteria>
      <criteria>?topic bf:label ?label</criteria>
      <criteria>OPTIONAL { ?topic bf:identifier ?id}</criteria>
      <criteria>OPTIONAL { ?topic bf:relatedTo ?relatedTo}</criteria>
      <criteria>OPTIONAL { ?topic bf:authorizedAccessPoint ?authorizedAccessPoint}</criteria>
      <index type="bf.topic">?topic bf:label %v FILTER(contains(%v, %s))</index>
      <index type="any">?topic bf:label %v FILTER(contains(%v, %s))</index>
    </db>

    <!-- Title search, probably not needed. Will need to be rewritten to the same
    system as the work search above, with separate present query -->
    <db path="title" schema="sparql-results">
        <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
        <prefix>bf: http://bibframe.org/vocab/</prefix>
        <form>SELECT DISTINCT ?title ?titleValue 
            ?formDesignation ?partNumber ?partTitle ?subtitle 
            ?titleAttribute ?titleQualifier ?titleSource 
            ?titleType ?titleVariationDate</form>
        <criteria>?title a bf:Title</criteria>
        <criteria>OPTIONAL { ?title bf:titleValue ?titleValue}</criteria>
        <criteria>OPTIONAL { ?title bf:formDesignation ?formDesignation}</criteria>
        <criteria>OPTIONAL { ?title bf:partNumber ?partNumber}</criteria>
        <criteria>OPTIONAL { ?title bf:partTitle ?partTitle}</criteria>
        <criteria>OPTIONAL { ?title bf:subtitle ?subtitle}</criteria>
        <criteria>OPTIONAL { ?title bf:titleAttribute ?titleAttribute}</criteria>
        <criteria>OPTIONAL { ?title bf:titleQualifier ?titleQualifier}</criteria>
        <criteria>OPTIONAL { ?title bf:titleSource ?titleSource}</criteria>
        <criteria>OPTIONAL { ?title bf:titleType ?titleType}</criteria>
        <criteria>OPTIONAL { ?title bf:titleVariationDate ?titleVariationDate}</criteria>
        <index type="bf.title">?title bf:titleValue %v FILTER(contains(%v, %s))</index>
        <index type="bf.subtitle">?title bf:subtitle %v FILTER(contains(%v, %s))</index>
        <index type="bf.parttitle">?title bf:partTitle %v FILTER(contains(%v, %s))</index>
        <index type="any">?title ?rel  %v FILTER(contains(str(%v), %s))</index>
    </db>
    <!-- A hack to be able to look at any triplet in the base -->
    <db path="node" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT ?node ?rel ?obj</form>
      <index type="any">?node ?rel ?obj FILTER( str(?node) = %s )</index>
    </db>
    <!-- A way to see which triplets refers to a given uri. -->
    <db path="ref" schema="sparql-results">
      <prefix>rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns</prefix>
      <prefix>bf: http://bibframe.org/vocab/</prefix>
      <form>SELECT ?node ?rel ?obj</form>
      <index type="any">?node ?rel ?obj FILTER( str(?obj) = %s )</index>
    </db>
  </filter>
  <filter type="log">
    <message>http</message>
    <category apdu="true"/>
  </filter>
  <filter type="http_client">
    <x-forwarded-for>true</x-forwarded-for>
  </filter>
</filters>
